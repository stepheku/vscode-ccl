{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "CCL",
    "scopeName": "source.ccl",
    "uuid": "B8887E40-CC80-11E3-9C1A-0800200C9A66",
    "patterns": [
        { "include": "#comments"  },
        { "include": "#operators" },
        { "include": "#datatypes" },
        { "include": "#constants" },
        { "include": "#variables" },
        { "include": "#keywords"  }
    ],
    "repository": {
        "comments" :
        {
            "patterns": [
                {
                    "comment": "Block comment",
                    "name": "comment.block.ccl",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "comment": "Single-line comment (semicolon)",
                    "name": "comment.line.semicolon.ccl",
                    "match": ";.*"
                },
                {
                    "comment": "Single-line comment (exclamation mark)",
                    "name": "comment.line.exclamation-mark.ccl",
                    "match": "!(?!=).*"
                }
            ]
        },
        "operators" : {
            "patterns": [
                {
                    "comment": "Operators (math and comparisons)",
                    "name": "keyword.operator.ccl",
                    "match": "(?:[\\-+/*<>=]|[!<>]?=)"
                }
            ]
        },
        "datatypes" : {
            "patterns": [
                {
                    "comment": "Data Types (integer)",
                    "name": "entity.name.type.ccl",
                    "match": "(?i)\\bu?(?:i1|i2|i4|w8)\\b"
                },
                {
                    "comment": "Data Types (float)",
                    "name": "entity.name.type.ccl",
                    "match": "(?i)\\bf(?:4|8)\\b"
                },
                {
                    "comment": "Data Types (string)",
                    "name": "entity.name.type.ccl",
                    "match": "(?i)\\bz?g?(?:c\\d+|vc(?:\\d+)?)\\b"
                },
                {
                    "comment": "Data Types (datetime)",
                    "name": "entity.name.type.ccl",
                    "match": "(?i)\\b(dm12|dm14|dq8)\\b"
                }
            ]
        },
        "constants" : {
            "patterns": [
                {
                    "comment": "String (single quotation marks)",
                    "name": "string.quoted.single.ccl",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        { "include": "#character_escape" }
                    ]
                },
                {
                    "comment": "String (double quotation marks)",
                    "name": "string.quoted.double.ccl",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        { "include": "#character_escape" }
                    ]
                },
                {
                    "comment": "String (caret/circumflex accent)",
                    "name": "string.quoted.caret.ccl",
                    "begin": "\\^",
                    "end": "\\^",
                    "patterns": [
                        { "include": "#character_escape" }
                    ]
                },
                {
                    "comment": "String (tilde)",
                    "name": "string.quoted.tilde.ccl",
                    "begin": "~",
                    "end": "~",
                    "patterns": [
                        { "include": "#character_escape" }
                    ]
                },
                {
                    "comment": "String (vertical line)",
                    "name": "string.quoted.vertical-line.ccl",
                    "begin": "\\|",
                    "end": "\\|",
                    "patterns": [
                        { "include": "#character_escape" }
                    ]
                },
                {
                    "comment": "Constant (integer)",
                    "name": "constant.numeric.ccl",
                    "match": "\\b\\d+\\.?(?:\\d+)?\\b"
                }
            ]
        },
        "character_escape" : {
            "patterns": [
                {
                    "comment": "Character escape",
                    "name": "constant.character.escape.ccl",
                    "match": "\\\\."
                }
            ]
        },
        "variables" : {
            "patterns": [
                {
                    "comment": "System Variables (Version Number)",
                    "name": "variable.language.ccl",
                    "match": "(?i)\\b(?:currev|currevminor|currevminor2|currevhnam|curcclrev|curcclver)\\b"
                },
                {
                    "comment": "System Variables (Environment)",
                    "name": "variable.language.ccl",
                    "match": "(?i)\\b(?:cursys|cursys2|curserver|curlocale|curbedrock|curclientid|curbatch|curenv|curimage|curnetdomain|curnode|curdomain|curuser|curgroup|curprcname|curprog|cursource|curmem|curutc|curutcdiff|curscroll|curecho)\\b"
                },
                {
                    "comment": "System Variables (Relational DB Settings)",
                    "name": "variable.language.ccl",
                    "match": "(?i)\\b(?:currdb|currdbaccess|currdbhandle|currdblink|currdbname|currdbopt|currdbsys|currdbuser)\\b"
                },
                {
                    "comment": "System Variables (Current date/time)",
                    "name": "variable.language.ccl",
                    "match": "(?i)\\b(?:curclk|curdate|curtime|curtime2|curtime3|curtimezone|curtimezoneapp|curtimezonedef|curtimezonesys|sysdate|systimestamp)\\b"
                },
                {
                    "comment": "System Variables (Runtime)",
                    "name": "variable.language.ccl",
                    "match": "(?i)\\b(?:curaccept|curhelp|curendreport|curqual|curreturn|curwork)\\b"
                },
                {
                    "comment": "System Variables (ReportWriter)",
                    "name": "variable.language.ccl",
                    "match": "(?i)\\b(?:curpage|col|row|maxcol|maxrow)\\b"
                }
            ]
        },
        "keywords" : {
            "patterns": [
                {
                    "comment": "Transaction Control Statements",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:commit|rollback|go)\\b"
                },
                {
                    "comment": "Access Control Statements",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:grant|revoke)\\b"
                },
                {
                    "comment": "Data Maniupulation Statements (SELECT, etc.)",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:select(?:\\s+distinct)?|insert|update|merge|delete|union(?:\\s+all)?|minus|intersect)\\b"
                },
                {
                    "comment": "Data Maniupulation Statements (SELECT clauses)",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:into|from|plan|where|and|or|set|group\\s+by|having|order(?:\\s+by)?|with)\\b"
                },
                {
                    "comment": "Data Maniupulation Statements (JOIN clauses)",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:(?:(?:full|left|right|inner)\\s+)?join|orjoin)\\b"
                },
                {
                    "comment": "Data Maniupulation Statements (WITH clauses)",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:append|archive|check|cpc|nocpc|compress|constraint|convert|counter|nocounter|crt|curdio|dio|dioduplex|diomargin|expand|filesort|format|noformat|formfeed|forms|noforms|forupdate|forupdatewait|heading|noheading|index|indexunique|landscape|nolandscape|maxcol|maxqual|maxread|maxrec|maxrow|memsort|mine|nullreport|orahint|orahintcbo|organization|owner|outerjoin|pcformat|pivot|preserve|nopreserve|print|rdbarrayfetch|rdbbindcons|nordbbindcons|rdbcboreparse|nordbcboreparse|rdbplan|rdbcbopluszero|nordbcbopluzero|rdbmsmisc|rdbrange|rdbunion|recsort|separator|size|skipbedrock|skiplogdomain|skipreport|sqltype|status|synonym|tablespace|test|time|version)\\b"
                },
                {
                    "comment": "Data Maniupulation Statements (miscellaneous)",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:in|as|asc|desc)\\b"
                },
                {
                    "comment": "Create/Drop Program",
                    "match": "(?i)\\b(create|drop)\\s+(program)\\s+([[:alnum:]][_[:alnum:]]*)(:[[:alnum:]]+)?\\b",
                    "captures": {
                        "1": { "name": "keyword.control.ccl" },
                        "2": { "name": "keyword.control.ccl" },
                        "3": { "name": "entity.name.function.ccl" },
                        "4": { "name": "entity.name.type" }
                    }
                },
                {
                    "comment": "Program Flow Control",
                    "name": "keyword.control.ccl",
                    "match": "(?i)\\b(?:if|elseif|else|endif|while|endwhile|case|endcase|for|endfor)\\b"
                },
                {
                    "comment": "Aggregate Functions",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:count|sum|avg|cube|min|max|median|percent|rollup|stddev|variance)\\b"
                },
                {
                    "comment": "Bitwise Functions",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:band|bnot|bor|btest|bxor)\\b"
                },
                {
                    "comment": "Math Functions",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:abs|ceil|event|exp|floor|greatest|least|log|log10|maxval|minval|mod|rand)\\b"
                },
                {
                    "comment": "CCL Functions (A-B)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:aesdecryptfile|aesencryptfile|alter|alter2|alterlist|asis|assign|assign2|assign3)\\b"
                },
                {
                    "comment": "CCL Functions (C)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:calcpos|callprg|cclfmt|cclio|char|check|checkdic|checkfun|checkprg|checkqueue|cost|curcodecover|curprog)\\b"
                },
                {
                    "comment": "CCL Functions (CNVT)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:cnvtacc|cnvtalias|cnvtalphanum|cnvtbool|cnvtb10B16|cnvtb10b36|cnvtb16b10|cnvtb36b10|cnvthexraw|cnvtint|cnvtjsontorec|cnvtphone|cnvtrawhex|cnvtreal|cnvtrectoxml|cnvtrectojson|cnvtxmltorec)\\b"
                },
                {
                    "comment": "CCL Functions (D-I)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:decode|error|evaluate|evaluate2|expand|findfile|ichar|initarray|initrec|isnumeric)\\b"
                },
                {
                    "comment": "CCL Functions (L)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:list|locateval|locatevalsort|logical)\\b"
                },
                {
                    "comment": "CCL Functions (M)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:maxrec|memalloc|memfree|memrealloc|modcheck|modify|moverec|movereclist)\\b"
                },
                {
                    "comment": "CCL Functions (N)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:negate|nordbbind|null|nullcheck|nullind|nullterm|nullval)\\b"
                },
                {
                    "comment": "CCL Functions (O)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:operator|outerjoin)\\b"
                },
                {
                    "comment": "CCL Functions (P)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:parameter|parameter2|parser|percentile|proxyuser)\\b"
                },
                {
                    "comment": "CCL Functions (R)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:rdbbind|reflect|remove|renamerec|reportinfo|reportmove|reportrow|round)\\b"
                },
                {
                    "comment": "CCL Functions (S)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:selectivity|seq|size|sort|sortsearch|sound|soundex|sqlpassthru)\\b"
                },
                {
                    "comment": "CCL Functions (T-Z)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:tdbexecute|text|textlen|trace|type|validate|value|wtmodcheck)\\b"
                },
                {
                    "comment": "String Functions (A-B)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:aesdecrypt|aesencrypt|blobget|blobgetlen|build|build2)\\b"
                },
                {
                    "comment": "String Functions (C-E)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:cnvtcap|cnvtlower|cnvtnls|cnvtnlssort|cnvtstring|cnvtstringchk|cnvtuplper|concat|curfile|curlocale)\\b"
                },
                {
                    "comment": "String Functions (F-Z)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:fillstring|findstring|format|movestring|notrim|nopatstring|patstring|piece|replace|substring|text|trim|trimbind)\\b"
                },
                {
                    "comment": "Datetime Functions (CNVT)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:cnvtage|cnvtage2|cnvtagedatetime|cnvtdate|cnvtdate2|cnvtdatetime|cnvtdatetime2|cnvtdatetimerdb|cnvtdatetimeutc|cnvtdatetimeutc2|cnvtlookahead|cnvtlookbehind|cnvtmin|cnvtmin2|cnvttime|cnvttime2|cnvttimestamp)\\b"
                },
                {
                    "comment": "Datetime Functions (DATETIME)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:datetimeadd|datetimecmp|datetimecmputc|datetimediff|datetimefind|datetimepart|datetimetrunc|datetimezone|datetimezonebyindex|datetimezonebyname|datetimezoneformat)\\b"
                },
                {
                    "comment": "Datetime Functions (A-Z)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:day|hour|julian|minute|month|utc|weekday|year)\\b"
                },
                {
                    "comment": "UAR Functions (A-Z)",
                    "name": "support.function.ccl",
                    "match": "(?i)\\b(?:uar_get_code_by|uar_get_code_description|uar_get_code_display|uar_get_code_meaning|uar_get_meaning_by_codeset)\\b"
                }
            ]
        }
    }
}